#!/bin/bash
# MarketPilot Deployment Backup Script
# Preserves all critical configurations and fixes for future deployments

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Create backup directory with timestamp
BACKUP_DIR="deployment_backups/$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

log_info "Creating deployment backup in $BACKUP_DIR"

# 1. Backup critical configuration files
log_info "Backing up configuration files..."
cp -r config/ "$BACKUP_DIR/config/" 2>/dev/null || log_warning "No config directory found"
log_success "Configuration files backed up"

# 2. Backup the working backend
log_info "Backing up working backend..."
cp modular_backend.py "$BACKUP_DIR/modular_backend.py" 2>/dev/null || log_warning "modular_backend.py not found"
cp -r dashboard_backend/ "$BACKUP_DIR/dashboard_backend/" 2>/dev/null || log_warning "dashboard_backend directory not found"
log_success "Backend files backed up"

# 3. Backup frontend proxy configuration
log_info "Backing up frontend configuration..."
cp dashboard_frontend/src/setupProxy.js "$BACKUP_DIR/setupProxy.js" 2>/dev/null || log_warning "setupProxy.js not found"
cp dashboard_frontend/package.json "$BACKUP_DIR/package.json" 2>/dev/null || log_warning "package.json not found"
log_success "Frontend configuration backed up"

# 4. Backup critical component fixes
log_info "Backing up fixed components..."
mkdir -p "$BACKUP_DIR/frontend_fixes"
cp dashboard_frontend/src/components/ui/TradeCardEnhanced.jsx "$BACKUP_DIR/frontend_fixes/" 2>/dev/null || log_warning "TradeCardEnhanced.jsx not found"
cp dashboard_frontend/src/pages/DcaStrategyBuilder.jsx "$BACKUP_DIR/frontend_fixes/" 2>/dev/null || log_warning "DcaStrategyBuilder.jsx not found"
cp dashboard_frontend/src/pages/SimulationPage.jsx "$BACKUP_DIR/frontend_fixes/" 2>/dev/null || log_warning "SimulationPage.jsx not found"
cp dashboard_frontend/src/index.js "$BACKUP_DIR/frontend_fixes/" 2>/dev/null || log_warning "index.js not found"
log_success "Component fixes backed up"

# 5. Create deployment verification script
cat > "$BACKUP_DIR/verify_deployment.sh" << 'EOF'
#!/bin/bash
# Deployment Verification Script
# Run this after deployment to ensure everything is working

echo "üîç Verifying MarketPilot deployment..."

# Test backend health
echo "Testing backend health..."
curl -s http://localhost:8000/health || echo "‚ùå Backend health check failed"

# Test API endpoints
echo "Testing API endpoints..."
curl -s http://localhost:8000/api/trades/active > /dev/null && echo "‚úÖ Active trades API working" || echo "‚ùå Active trades API failed"
curl -s http://localhost:8000/api/3commas/metrics > /dev/null && echo "‚úÖ 3Commas API working" || echo "‚ùå 3Commas API failed"
curl -s http://localhost:8000/config/dca > /dev/null && echo "‚úÖ DCA config API working" || echo "‚ùå DCA config API failed"

# Test frontend proxy
echo "Testing frontend proxy..."
curl -s http://localhost:3000/api/trades/active > /dev/null && echo "‚úÖ Frontend proxy working" || echo "‚ùå Frontend proxy failed"

echo "üéâ Deployment verification complete!"
EOF

chmod +x "$BACKUP_DIR/verify_deployment.sh"

# 6. Create restoration instructions
cat > "$BACKUP_DIR/RESTORE_INSTRUCTIONS.md" << 'EOF'
# üîÑ MarketPilot Deployment Restoration Guide

## Quick Restore Commands

### 1. Restore Configuration
```bash
cp -r config/ /path/to/marketpilot/
```

### 2. Restore Working Backend
```bash
cp modular_backend.py /path/to/marketpilot/
cp -r dashboard_backend/ /path/to/marketpilot/
```

### 3. Restore Frontend Configuration
```bash
cp setupProxy.js /path/to/marketpilot/dashboard_frontend/src/
cp package.json /path/to/marketpilot/dashboard_frontend/
```

### 4. Restore Component Fixes
```bash
cp frontend_fixes/* /path/to/marketpilot/dashboard_frontend/src/components/ui/
cp frontend_fixes/* /path/to/marketpilot/dashboard_frontend/src/pages/
cp frontend_fixes/index.js /path/to/marketpilot/dashboard_frontend/src/
```

### 5. Verify Deployment
```bash
./verify_deployment.sh
```

## Critical API Keys to Set
- 3Commas Bot ID: 16477920
- 3Commas Email Token: aa5bba08-4875-41bc-91a0-5e0bb66c72b0
- Pair: USDT_BTC

## Essential Endpoints to Test
- http://localhost:8000/health
- http://localhost:8000/api/trades/active
- http://localhost:8000/api/3commas/metrics
- http://localhost:8000/config/dca

## Frontend Integration Checklist
- [ ] setupProxy.js configured
- [ ] No [object Object] errors in console
- [ ] Real deal IDs displaying (not mock)
- [ ] All config pages load/save/reset
- [ ] DCA Strategy Builder functional
EOF

# 7. Create environment documentation
cat > "$BACKUP_DIR/WORKING_ENVIRONMENT.md" << EOF
# üöÄ Working Environment Documentation

## System Information
- **Date Created:** $(date)
- **MarketPilot Version:** Deployment 2 (Pre-Gilligan)
- **Backend:** modular_backend.py (Canonical)
- **Frontend:** React with setupProxy.js routing

## Critical Configurations

### 3Commas Integration
- **Status:** ‚úÖ Working with real API
- **Bot ID:** 16477920
- **Deal IDs:** Real (2372577387, 2372575631)
- **Demo Bot:** Active and functional

### API Endpoints Status
- **Health Check:** ‚úÖ http://localhost:8000/health
- **Active Trades:** ‚úÖ http://localhost:8000/api/trades/active
- **3Commas Metrics:** ‚úÖ http://localhost:8000/api/3commas/metrics
- **DCA Config:** ‚úÖ http://localhost:8000/config/dca
- **Price Series:** ‚úÖ http://localhost:8000/price-series
- **Simulation:** ‚úÖ http://localhost:8000/api/simulation/data/symbols

### Frontend Status
- **Proxy Configuration:** ‚úÖ Complete routing setup
- **Component Errors:** ‚úÖ All fixed (deal_id.slice, React keys)
- **API Integration:** ‚úÖ Real data displaying
- **Config Pages:** ‚úÖ All functional (save/load/reset)

### Known Working Features
1. Dashboard landing page - All panels functional
2. Active trades display - Real 3Commas data
3. DCA Strategy Builder - Working simulation
4. Configuration system - Complete CRUD operations
5. Real-time updates - Live data refreshing

### Resolved Issues
1. ‚úÖ datetime.utcnow() deprecation warnings fixed
2. ‚úÖ Frontend proxy routing complete
3. ‚úÖ Real 3Commas deal IDs implemented
4. ‚úÖ React component errors resolved
5. ‚úÖ DCA configuration system working
6. ‚úÖ Simulation endpoints functional
7. ‚úÖ [object Object] error handling added

## Dependencies
- **Python:** 3.12+ with venv
- **Node.js:** Latest with npm
- **Redis:** Running on localhost:6379
- **Backend Port:** 8000
- **Frontend Port:** 3000

## Startup Commands
\`\`\`bash
# Backend
source venv/bin/activate && python3 modular_backend.py

# Frontend
cd dashboard_frontend && npm start
\`\`\`

This environment represents a stable, production-ready state!
EOF

# 8. Create git commit with backup info
echo "deployment_backups/" >> .gitignore

log_success "Backup created successfully in $BACKUP_DIR"
log_info "Backup contents:"
ls -la "$BACKUP_DIR"

echo ""
log_success "üéâ Deployment backup complete!"
echo ""
echo "üìÅ Backup Location: $BACKUP_DIR"
echo "üîß Restoration Guide: $BACKUP_DIR/RESTORE_INSTRUCTIONS.md"
echo "üìã Environment Docs: $BACKUP_DIR/WORKING_ENVIRONMENT.md"
echo "‚úÖ Verification Script: $BACKUP_DIR/verify_deployment.sh"
echo ""
log_warning "‚ö†Ô∏è  NEVER LOSE THIS BACKUP! It contains all working configurations."
