import axios from "axios";
import { useEffect, useState } from "react";
import CandleChart from "../components/ui/CandleChart";
import { Card, CardHeader, CardContent, CardTitle } from "../components/ui/Card";
import { FormField } from "../components/ui/FormField";
import { Input } from "../components/ui/Input";
import { Switch } from "../components/ui/Switch";
import {
  Collapsible,
  CollapsibleTrigger,
  CollapsibleContent,
} from "../components/ui/Collapsible";

// --- Reusable UI helpers ---
const FieldGrid = ({ children }) => (
  <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">{children}</div>
);

const NumericField = ({ label, value, onChange, ...props }) => (
  <FormField label={label}>
    <Input
      type="number"
      value={value}
      step="0.01"
      onChange={e => onChange(parseFloat(e.target.value))}
      {...props}
    />
  </FormField>
);

const SwitchField = ({ label, checked, onChange }) => (
  <FormField label={label} className="flex-row items-center gap-2">
    <Switch checked={checked} onCheckedChange={onChange} />
  </FormField>
);

const Section = ({ title, children }) => (
  <div>
    <div className="font-semibold text-lg mb-2">{title}</div>
    {children}
  </div>
);

const DcaStrategyBuilder = () => {
  const [symbol, setSymbol] = useState("BTC");
  const [interval, setInterval] = useState("1h");
  const [series, setSeries] = useState([]);
  const [entryTime, setEntryTime] = useState(null);
  const [dcaResults, setDcaResults] = useState([]);
  const [params, setParams] = useState({
    entryScore: 0.75,
    currentScore: 0.62,
    safuScore: 0.85,
    drawdownPct: -11,
    tp1ShiftPct: 5.2,
    confidence: 0.7,
    odds: 0.65,
    rsi: 42,
    macdHistogram: 0.003,
    macdLift: 0.01,
    rsiSlope: 1.5,
    adx: 24.5,
    // Zombie Detection config
    zombie_tag: {
      enabled: true,
      min_drawdown_pct: 0.5,
      max_drawdown_pct: 5,
      max_score: 0.3,
      require_zero_recovery_odds: true,
      max_macd_lift: 0,
      max_rsi_slope: 0,
    },
    scoreDecayMin: 0.2,
    safuThreshold: 0.5,
    maxTp1ShiftPct: 40,
    allowReentry: 1,
    minConfidenceDelta: 0.02,
    minTp1Delta: 3,
    useSafuReentry: 1,
    btcSafeRequired: 1,
    confidenceOverride: 1,
    maxTradeUsdt: 2000,
    baseOrderUsdt: 200,
    requireTp1Feasibility: 1,
    requireIndicatorHealth: 1,
    // --- Extended config below ---
    // Global DCA config
    drawdown_trigger_pct: 0.9,
    buffer_zone_pct: 0,
    require_recovery_odds: false,
    min_recovery_probability: 0.85,
    min_confidence_odds: 0.85,
    min_be_improvement_pct: 0.8,

    // Trajectory Check
    use_trajectory_check: true,
    trajectory_thresholds: {
      macd_lift_min: 0.0001,
      rsi_slope_min: 1.5,
    },

    // Abandon thresholds
    abandon_thresholds: {
      min_score: 0.2,
      min_safu_score: 0.4,
      min_recovery_odds: 0.4,
    },

    // Confidence DCA guard
    use_confidence_override: false,
    confidence_dca_guard: {
      safu_score_min: 0.5,
      macd_lift_min: 5e-05,
      rsi_slope_min: 1,
      confidence_score_min: 0.7,
      min_confidence_delta: 0.05,
      min_tp1_shift_gain_pct: 1.1,
    },

    // Soft confidence override
    use_soft_confidence_override: false,
    soft_confidence_override: {
      min_confidence: 0.75,
      min_recovery_odds: 0.8,
      min_safu_score: 0.7,
      min_health_score: 0.6,
      min_drawdown_pct: 2,
      min_confidence_delta: 0.05,
      min_tp1_shift_pct: 2,
    },

    // Safety order table and TP1 targets
    so_volume_table: [20, 10, 19, 36.1, 68.59, 130.32, 247.61, 470.46, 893.87],
    tp1_targets: [0.4, 1.1, 1.7, 2.4, 3, 3.9, 5.2, 7.1, 10],

    // ML spend model
    use_ml_spend_model: true,
    spend_adjustment_rules: {
      min_volume: 20,
      max_multiplier: 3,
      tp1_shift_soft_cap: 2.5,
      low_dd_pct_limit: 1,
    },

    // Health scoring
    health_scoring: {
      enabled: true,
      weights: {
        recovery_odds: 0.4,
        confidence_score: 0.3,
        safu_score: 0.1,
        entry_score_decay: 0.1,
        indicator_health: 0.1,
      },
      decay_threshold: 0.3,
      indicator_thresholds: {
        rsi_min: 45,
        macd_histogram_min: 0,
        adx_min: 20,
      },
      health_thresholds: {
        healthy: 0.7,
        weak: 0.4,
      },
    },

    // Step guards
    step_repeat_guard: {
      enabled: true,
      min_conf_delta: 0.05,
      min_tp1_delta: 1.2,
    },
    step_progress_guard: {
      enabled: true,
      min_price_change_pct: 0.5,
      min_seconds_elapsed: 900,
      min_be_improvement_pct: 1,
    },

    // SAFU exit model
    use_safu_exit_model: true,
    ml_exit_threshold: 0.6,
    enforce_if: "both",

    // Logging
    log_verbose: true,
  });

  useEffect(() => {
    axios.get("/price-series", { params: { symbol, interval } })
      .then(res => {
        if (Array.isArray(res.data.series)) {
          console.log("Fetched full series data length:", res.data.series.length);
          const mapped = res.data.series.map(d => ({
            timestamp: Number(d.timestamp),
            open: d.open,
            high: d.high,
            low: d.low,
            close: d.close,
          }));
          setSeries(mapped);
        }
      })
      .catch(err => console.error("Failed to load price series:", err));
  }, [symbol, interval]);

  const updateParam = (key, value) => {
    setParams((prev) => ({ ...prev, [key]: value }));
  };

  const updateNestedParam = (section, key, value) => {
    setParams((prev) => ({
      ...prev,
      [section]: {
        ...prev[section],
        [key]: value,
      },
    }));
  };

  const updateArrayParam = (section, index, value) => {
    setParams(prev => {
      const arr = Array.isArray(prev[section]) ? [...prev[section]] : [];
      arr[index] = value;
      return { ...prev, [section]: arr };
    });
  };

  return (
    <Card className="p-6 bg-gray-900 text-white">
      <CardHeader>
        <CardTitle className="text-2xl">📌 DCA Strategy Builder</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Core DCA Config */}
        <Section title="🛠️ DCA Config">
          <FieldGrid>
            <NumericField label="Entry Score" value={params.entryScore} onChange={(v) => updateParam("entryScore", v)} />
            <NumericField label="Current Score" value={params.currentScore} onChange={(v) => updateParam("currentScore", v)} />
            <NumericField label="SAFU Score" value={params.safuScore} onChange={(v) => updateParam("safuScore", v)} />
            <NumericField label="Drawdown %" value={params.drawdownPct} onChange={(v) => updateParam("drawdownPct", v)} />
            <NumericField label="TP1 Shift %" value={params.tp1ShiftPct} onChange={(v) => updateParam("tp1ShiftPct", v)} />
            <NumericField label="Confidence" value={params.confidence} onChange={(v) => updateParam("confidence", v)} />
            <NumericField
              label="Max Trade USDT"
              value={params.maxTradeUsdt}
              onChange={(v) => updateParam("maxTradeUsdt", v)}
            />
            <NumericField
              label="Base Order USDT"
              value={params.baseOrderUsdt}
              onChange={(v) => updateParam("baseOrderUsdt", v)}
            />
            <NumericField
              label="Drawdown Trigger %"
              value={params.drawdown_trigger_pct}
              onChange={(v) => updateParam("drawdown_trigger_pct", v)}
            />
            <NumericField
              label="Buffer Zone %"
              value={params.buffer_zone_pct}
              onChange={(v) => updateParam("buffer_zone_pct", v)}
            />
            <NumericField
              label="SAFU Score Threshold"
              value={params.safu_score_threshold}
              onChange={(v) => updateParam("safu_score_threshold", v)}
            />
            <NumericField
              label="Score Decay Min"
              value={params.score_decay_min}
              onChange={(v) => updateParam("score_decay_min", v)}
            />
            <SwitchField
              label="Require Indicator Health"
              checked={params.require_indicator_health}
              onChange={(v) => updateParam("require_indicator_health", v)}
            />
          </FieldGrid>
        </Section>

        {/* Symbol/Interval and Series grid */}
        <div className="flex flex-wrap gap-4">
          <div className="flex flex-col">
            <label>Symbol</label>
            <input value={symbol} onChange={(e) => setSymbol(e.target.value)} className="bg-gray-800 p-2 rounded" />
          </div>
          <div className="flex flex-col">
            <label>Interval</label>
            <input value={interval} onChange={(e) => setInterval(e.target.value)} className="bg-gray-800 p-2 rounded" />
          </div>
          <div className="flex flex-col">
            <label>Price Series</label>
            <span className="text-sm text-gray-400">
              {series.length ? `${series.length} candles loaded` : "No candle data loaded."}
            </span>
          </div>
        </div>
        <Collapsible>
          <CollapsibleTrigger className="text-blue-400 cursor-pointer text-sm hover:underline mb-4">
            ▶ Advanced DCA Settings
          </CollapsibleTrigger>
          <CollapsibleContent className="space-y-6">

        {/* SAFU Exit Model */}
        <Section title="🚪 SAFU Exit Model">
          <FieldGrid>
            <SwitchField
              label="Use SAFU Exit Model"
              checked={params.use_safu_exit_model}
              onChange={(v) => updateParam("use_safu_exit_model", v)}
            />
            <NumericField
              label="ML Exit Threshold"
              value={params.ml_exit_threshold}
              onChange={(val) => updateParam("ml_exit_threshold", val)}
            />
            <FormField label="Enforce If">
              <select
                className="bg-gray-800 p-2 rounded"
                value={params.enforce_if}
                onChange={(e) => updateParam("enforce_if", e.target.value)}
              >
                <option value="ml_only">ML Only</option>
                <option value="score_only">Score Only</option>
                <option value="both">Both</option>
              </select>
            </FormField>
          </FieldGrid>
        </Section>

        {/* Logging */}
        <Section title="🔊 Logging">
          <FieldGrid>
            <SwitchField
              label="Verbose Logging"
              checked={params.log_verbose}
              onChange={(v) => updateParam("log_verbose", v)}
            />
          </FieldGrid>
        </Section>

        {/* Health Scoring */}
        <Section title="🧬 Health Scoring">
          <FieldGrid>
            <SwitchField
              label="Enable Health Scoring"
              checked={params.health_scoring.enabled}
              onChange={(v) =>
                updateNestedParam("health_scoring", "enabled", v)
              }
            />
            <NumericField
              label="Recovery Odds Weight"
              value={params.health_scoring.weights.recovery_odds}
              onChange={(val) =>
                updateNestedParam("health_scoring", "weights", {
                  ...params.health_scoring.weights,
                  recovery_odds: val,
                })
              }
            />
            <NumericField
              label="Confidence Score Weight"
              value={params.health_scoring.weights.confidence_score}
              onChange={(val) =>
                updateNestedParam("health_scoring", "weights", {
                  ...params.health_scoring.weights,
                  confidence_score: val,
                })
              }
            />
            <NumericField
              label="SAFU Score Weight"
              value={params.health_scoring.weights.safu_score}
              onChange={(val) =>
                updateNestedParam("health_scoring", "weights", {
                  ...params.health_scoring.weights,
                  safu_score: val,
                })
              }
            />
            <NumericField
              label="Entry Score Decay Weight"
              value={params.health_scoring.weights.entry_score_decay}
              onChange={(val) =>
                updateNestedParam("health_scoring", "weights", {
                  ...params.health_scoring.weights,
                  entry_score_decay: val,
                })
              }
            />
            <NumericField
              label="Indicator Health Weight"
              value={params.health_scoring.weights.indicator_health}
              onChange={(val) =>
                updateNestedParam("health_scoring", "weights", {
                  ...params.health_scoring.weights,
                  indicator_health: val,
                })
              }
            />
            <NumericField
              label="Decay Threshold"
              value={params.health_scoring.decay_threshold}
              onChange={(val) =>
                updateNestedParam("health_scoring", "decay_threshold", val)
              }
            />
            <NumericField
              label="RSI Min"
              value={params.health_scoring.indicator_thresholds.rsi_min}
              onChange={(val) =>
                updateNestedParam("health_scoring", "indicator_thresholds", {
                  ...params.health_scoring.indicator_thresholds,
                  rsi_min: val,
                })
              }
            />
            <NumericField
              label="MACD Histogram Min"
              value={params.health_scoring.indicator_thresholds.macd_histogram_min}
              onChange={(val) =>
                updateNestedParam("health_scoring", "indicator_thresholds", {
                  ...params.health_scoring.indicator_thresholds,
                  macd_histogram_min: val,
                })
              }
            />
            <NumericField
              label="ADX Min"
              value={params.health_scoring.indicator_thresholds.adx_min}
              onChange={(val) =>
                updateNestedParam("health_scoring", "indicator_thresholds", {
                  ...params.health_scoring.indicator_thresholds,
                  adx_min: val,
                })
              }
            />
            <NumericField
              label="Healthy Threshold"
              value={params.health_scoring.health_thresholds.healthy}
              onChange={(val) =>
                updateNestedParam("health_scoring", "health_thresholds", {
                  ...params.health_scoring.health_thresholds,
                  healthy: val,
                })
              }
            />
            <NumericField
              label="Weak Threshold"
              value={params.health_scoring.health_thresholds.weak}
              onChange={(val) =>
                updateNestedParam("health_scoring", "health_thresholds", {
                  ...params.health_scoring.health_thresholds,
                  weak: val,
                })
              }
            />
          </FieldGrid>
        </Section>

        {/* Soft Confidence Override */}
        <Section title="🧪 Soft Confidence Override">
          <FieldGrid>
            <SwitchField
              label="Use Soft Confidence Override"
              checked={params.use_soft_confidence_override}
              onChange={(v) => updateParam("use_soft_confidence_override", v)}
            />
            <NumericField
              label="Min Confidence"
              value={params.soft_confidence_override.min_confidence}
              onChange={(val) =>
                updateNestedParam("soft_confidence_override", "min_confidence", val)
              }
            />
            <NumericField
              label="Min Recovery Odds"
              value={params.soft_confidence_override.min_recovery_odds}
              onChange={(val) =>
                updateNestedParam("soft_confidence_override", "min_recovery_odds", val)
              }
            />
            <NumericField
              label="Min SAFU Score"
              value={params.soft_confidence_override.min_safu_score}
              onChange={(val) =>
                updateNestedParam("soft_confidence_override", "min_safu_score", val)
              }
            />
            <NumericField
              label="Min Health Score"
              value={params.soft_confidence_override.min_health_score}
              onChange={(val) =>
                updateNestedParam("soft_confidence_override", "min_health_score", val)
              }
            />
            <NumericField
              label="Min Drawdown %"
              value={params.soft_confidence_override.min_drawdown_pct}
              onChange={(val) =>
                updateNestedParam("soft_confidence_override", "min_drawdown_pct", val)
              }
            />
            <NumericField
              label="Min Confidence Delta"
              value={params.soft_confidence_override.min_confidence_delta}
              onChange={(val) =>
                updateNestedParam("soft_confidence_override", "min_confidence_delta", val)
              }
            />
            <NumericField
              label="Min TP1 Shift %"
              value={params.soft_confidence_override.min_tp1_shift_pct}
              onChange={(val) =>
                updateNestedParam("soft_confidence_override", "min_tp1_shift_pct", val)
              }
            />
          </FieldGrid>
        </Section>

        {/* Zombie Detection */}
        <Section title="💀 Zombie Detection">
          <FieldGrid>
            <SwitchField
              label="Enable Zombie Detection"
              checked={params.zombie_tag.enabled}
              onChange={(v) => updateNestedParam("zombie_tag", "enabled", v)}
            />
            <NumericField
              label="Min Drawdown %"
              value={params.zombie_tag.min_drawdown_pct}
              onChange={(val) =>
                updateNestedParam("zombie_tag", "min_drawdown_pct", val)
              }
            />
            <NumericField
              label="Max Drawdown %"
              value={params.zombie_tag.max_drawdown_pct}
              onChange={(val) =>
                updateNestedParam("zombie_tag", "max_drawdown_pct", val)
              }
            />
            <NumericField
              label="Max Score"
              value={params.zombie_tag.max_score}
              onChange={(val) =>
                updateNestedParam("zombie_tag", "max_score", val)
              }
            />
            <SwitchField
              label="Require Zero Recovery Odds"
              checked={params.zombie_tag.require_zero_recovery_odds}
              onChange={(v) =>
                updateNestedParam("zombie_tag", "require_zero_recovery_odds", v)
              }
            />
            <NumericField
              label="Max MACD Lift"
              value={params.zombie_tag.max_macd_lift}
              onChange={(val) =>
                updateNestedParam("zombie_tag", "max_macd_lift", val)
              }
            />
            <NumericField
              label="Max RSI Slope"
              value={params.zombie_tag.max_rsi_slope}
              onChange={(val) =>
                updateNestedParam("zombie_tag", "max_rsi_slope", val)
              }
            />
          </FieldGrid>
        </Section>

        {/* SO Volume Table & TP1 Targets */}
        <Section title="📈 SO Volume & TP1 Targets">
          <FieldGrid>
            {params.so_volume_table.map((vol, idx) => (
              <NumericField
                key={`so_${idx}`}
                label={`SO Volume ${idx + 1}`}
                value={vol}
                onChange={(val) => updateArrayParam("so_volume_table", idx, val)}
              />
            ))}
            {params.tp1_targets.map((tgt, idx) => (
              <NumericField
                key={`tp1_${idx}`}
                label={`TP1 Target ${idx + 1}`}
                value={tgt}
                onChange={(val) => updateArrayParam("tp1_targets", idx, val)}
              />
            ))}
          </FieldGrid>
        </Section>




        {/* ML Spend Model */}
        <Section title="🤖 ML Spend Model">
          <FieldGrid>
            <SwitchField
              label="Use ML Spend Model"
              checked={params.use_ml_spend_model}
              onChange={(v) => updateParam("use_ml_spend_model", v)}
            />
            <NumericField
              label="Min Volume"
              value={params.spend_adjustment_rules.min_volume}
              onChange={(val) =>
                updateNestedParam("spend_adjustment_rules", "min_volume", val)
              }
            />
            <NumericField
              label="Max Multiplier"
              value={params.spend_adjustment_rules.max_multiplier}
              onChange={(val) =>
                updateNestedParam("spend_adjustment_rules", "max_multiplier", val)
              }
            />
            <NumericField
              label="TP1 Shift Soft Cap"
              value={params.spend_adjustment_rules.tp1_shift_soft_cap}
              onChange={(val) =>
                updateNestedParam("spend_adjustment_rules", "tp1_shift_soft_cap", val)
              }
            />
            <NumericField
              label="Low DD % Limit"
              value={params.spend_adjustment_rules.low_dd_pct_limit}
              onChange={(val) =>
                updateNestedParam("spend_adjustment_rules", "low_dd_pct_limit", val)
              }
            />
          </FieldGrid>
        </Section>

        {/* Step Guards */}
        <Section title="🚧 Step Guards">
          <FieldGrid>
            <SwitchField
              label="Enable Step Repeat Guard"
              checked={params.step_repeat_guard.enabled}
              onChange={(v) =>
                updateNestedParam("step_repeat_guard", "enabled", v)
              }
            />
            <NumericField
              label="Min Confidence Delta"
              value={params.step_repeat_guard.min_conf_delta}
              onChange={(val) =>
                updateNestedParam("step_repeat_guard", "min_conf_delta", val)
              }
            />
            <NumericField
              label="Min TP1 Delta"
              value={params.step_repeat_guard.min_tp1_delta}
              onChange={(val) =>
                updateNestedParam("step_repeat_guard", "min_tp1_delta", val)
              }
            />

            <SwitchField
              label="Enable Step Progress Guard"
              checked={params.step_progress_guard.enabled}
              onChange={(v) =>
                updateNestedParam("step_progress_guard", "enabled", v)
              }
            />
            <NumericField
              label="Min Price Change %"
              value={params.step_progress_guard.min_price_change_pct}
              onChange={(val) =>
                updateNestedParam("step_progress_guard", "min_price_change_pct", val)
              }
            />
            <NumericField
              label="Min Seconds Elapsed"
              value={params.step_progress_guard.min_seconds_elapsed}
              onChange={(val) =>
                updateNestedParam("step_progress_guard", "min_seconds_elapsed", val)
              }
            />
            <NumericField
              label="Min BE Improvement %"
              value={params.step_progress_guard.min_be_improvement_pct}
              onChange={(val) =>
                updateNestedParam("step_progress_guard", "min_be_improvement_pct", val)
              }
            />
          </FieldGrid>
        </Section>


        {entryTime !== null && (
          <div className="mb-4 p-2 bg-gray-700 rounded">
            <span className="text-sm text-green-400">✅ Selected Entry Timestamp:</span>{" "}
            <span className="text-sm text-white">{new Date(entryTime).toISOString().replace("T", " ").slice(0, 19)} UTC</span>
          </div>
        )}

          </CollapsibleContent>
        </Collapsible>

        <div className="mt-6 w-full" style={{ height: '400px' }}>
          <CandleChart
            data={series}
            width={800}
            height={400}
            selectedIndex={entryTime !== null ? series.findIndex(c => c.timestamp === entryTime) : -1}
            onCandleClick={(timestamp) => {
              console.log("Candle clicked →", timestamp);
              setEntryTime(timestamp);
            }}
            dcaMarkers={dcaResults.filter(d => d.decision === "FIRE")}
          />
        </div>

        <div className="mt-4">
          <button
            onClick={async () => {
              if (entryTime === null) {
                alert("Select an entry candle.");
                return;
              }
              try {
                const res = await axios.post("/dca/simulate", {
                  symbol,
                  entry_time: entryTime,  // 🔥 Already in milliseconds
                  tf: interval,
                  ...params
                });

                let resultArray = [];
                if (Array.isArray(res.data)) {
                  resultArray = res.data;
                } else if (Array.isArray(res.data?.result)) {
                  resultArray = res.data.result;
                } else if (Array.isArray(res.data?.result?.simulation)) {
                  resultArray = res.data.result.simulation;
                } else if (res.data?.result?.simulation && Array.isArray(res.data.result.simulation)) {
                  resultArray = res.data.result.simulation;
                } else {
                  console.error("Unexpected response format:", res.data);
                  return;
                }

                const mapped = resultArray.map(d => ({ ...d, time: d.timestamp }));
                setDcaResults(mapped);
              } catch (err) {
                console.error("Simulation failed:", err);
              }
            }}
            className="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-4 py-2 rounded"
          >
            Run DCA Simulation
          </button>
        </div>

        {entryTime !== null && (
          <div className="mt-2 text-sm text-gray-300">
            Entry Time: {new Date(entryTime).toISOString().replace("T", " ").slice(0, 19)} UTC | DCA Steps:{" "}
            {dcaResults.filter(d => d.decision === "FIRE").length}
          </div>
        )}

        {dcaResults.length > 0 && (
          <div className="mt-6 p-4 bg-gray-800 rounded">
            <h3 className="text-lg font-semibold text-white mb-2">📊 DCA Simulation Results</h3>
            <div className="space-y-2 text-sm text-gray-300">
              {dcaResults.map((step, i) => (
                <div key={i} className="border-b border-gray-700 pb-1">
                  <strong>Step {i + 1}</strong> — {step.decision} at{" "}
                  <span className="text-green-300">{new Date(step.timestamp).toISOString().replace("T", " ").slice(0, 19)} UTC</span>{" "}
                  | Price: ${step.price?.toFixed(2)} | Volume: {step.volume}
                </div>
              ))}
            </div>
          </div>
        )}

      </CardContent>
    </Card>
  );
};

export default DcaStrategyBuilder;
