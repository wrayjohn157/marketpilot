import axios from "axios";
import { useEffect, useState } from "react";
import CandleChart from "../components/ui/CandleChart";

const DcaStrategyBuilder = () => {
  const [symbol, setSymbol] = useState("BTC");
  const [interval, setInterval] = useState("1h");
  const [series, setSeries] = useState([]);
  const [entryTime, setEntryTime] = useState(null);
  const [dcaResults, setDcaResults] = useState([]);
  const [params, setParams] = useState({
    entryScore: 0.75,
    currentScore: 0.62,
    safuScore: 0.85,
    drawdownPct: -11,
    tp1ShiftPct: 5.2,
    confidence: 0.7,
    odds: 0.65,
    rsi: 42,
    macdHistogram: 0.003,
    macdLift: 0.01,
    rsiSlope: 1.5,
    adx: 24.5,
    zombieTag: 0,
    scoreDecayMin: 0.2,
    safuThreshold: 0.5,
    maxTp1ShiftPct: 40,
    allowReentry: 1,
    minConfidenceDelta: 0.02,
    minTp1Delta: 3,
    useSafuReentry: 1,
    btcSafeRequired: 1,
    confidenceOverride: 1,
    maxTradeUsdt: 2000,
    baseOrderUsdt: 200,
    requireTp1Feasibility: 1,
    requireIndicatorHealth: 1,
  });

  useEffect(() => {
    axios.get("/price-series", { params: { symbol, interval } })
      .then(res => {
        if (Array.isArray(res.data.series)) {
          console.log("Fetched full series data length:", res.data.series.length);
          const mapped = res.data.series.map(d => ({
            timestamp: Number(d.timestamp),
            open: d.open,
            high: d.high,
            low: d.low,
            close: d.close,
          }));
          setSeries(mapped);
        }
      })
      .catch(err => console.error("Failed to load price series:", err));
  }, [symbol, interval]);

  const updateParam = (key, value) => {
    setParams((prev) => ({ ...prev, [key]: value }));
  };

  return (
    <div className="p-6 text-white">
      <h2 className="text-2xl font-semibold mb-4">ðŸ“Œ DCA Strategy Builder</h2>
      <div className="flex flex-wrap gap-4 mb-6">
        <label className="text-sm flex items-center gap-2">
          <input
            type="checkbox"
            className="accent-green-500"
            checked={params.zombieTag === 1}
            onChange={(e) => updateParam("zombieTag", e.target.checked ? 1 : 0)}
          />
          Enable Zombie Detection
        </label>
        <label className="text-sm flex items-center gap-2">
          <input
            type="checkbox"
            className="accent-blue-500"
            checked={params.requireTp1Feasibility === 1}
            onChange={(e) => updateParam("requireTp1Feasibility", e.target.checked ? 1 : 0)}
          />
          Use TP1 Feasibility
        </label>
        <label className="text-sm flex items-center gap-2">
          <input
            type="checkbox"
            className="accent-purple-500"
            checked={params.requireIndicatorHealth === 1}
            onChange={(e) => updateParam("requireIndicatorHealth", e.target.checked ? 1 : 0)}
          />
          Require Indicator Health
        </label>
      </div>
      <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6">
        <div className="flex flex-col">
          <label>Symbol</label>
          <input value={symbol} onChange={(e) => setSymbol(e.target.value)} className="bg-gray-800 p-2 rounded" />
        </div>
        <div className="flex flex-col">
          <label>Interval</label>
          <input value={interval} onChange={(e) => setInterval(e.target.value)} className="bg-gray-800 p-2 rounded" />
        </div>
        <div className="flex flex-col">
          <label>Price Series</label>
          <span className="text-sm text-gray-400">
            {series.length ? `${series.length} candles loaded` : "No candle data loaded."}
          </span>
        </div>
      </div>

      <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-8">
        {Object.entries(params).map(([key, val]) => (
          <div key={key} className="flex flex-col">
            <label className="capitalize">{key.replace(/([A-Z])/g, " $1")}</label>
            <input
              type="number"
              value={val}
              step="0.01"
              onChange={(e) => updateParam(key, parseFloat(e.target.value))}
              className="bg-gray-800 p-2 rounded"
            />
          </div>
        ))}
      </div>

      {entryTime !== null && (
        <div className="mb-4 p-2 bg-gray-700 rounded">
          <span className="text-sm text-green-400">âœ… Selected Entry Timestamp:</span>{" "}
          <span className="text-sm text-white">{new Date(entryTime).toLocaleString()}</span>
        </div>
      )}

      <div className="mt-6 w-full" style={{ height: '400px' }}>
        <CandleChart
          data={series}
          width={800}
          height={400}
          selectedIndex={entryTime !== null ? series.findIndex(c => c.timestamp === entryTime) : -1}
          onCandleClick={(timestamp) => {
            console.log("Candle clicked â†’", timestamp);
            setEntryTime(timestamp);
          }}
        />
      </div>

      <div className="mt-4">
        <button
          onClick={async () => {
            if (entryTime === null) {
              alert("Select an entry candle.");
              return;
            }
            try {
              const res = await axios.post("/dca/simulate", {
                symbol,
                entry_time: entryTime,  // ðŸ”¥ Already in milliseconds
                tf: interval,
                ...params
              });
              const mapped = (res.data.result || []).map(d => ({ ...d, time: d.timestamp / 1000 }));
              setDcaResults(mapped);
            } catch (err) {
              console.error("Simulation failed:", err);
            }
          }}
          className="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-4 py-2 rounded"
        >
          Run DCA Simulation
        </button>
      </div>

      {entryTime !== null && (
        <div className="mt-2 text-sm text-gray-300">
          Entry Time: {new Date(entryTime).toLocaleString()} | DCA Steps:{" "}
          {dcaResults.filter(d => d.decision === "FIRE").length}
        </div>
      )}

      {dcaResults.length > 0 && (
        <div className="mt-6 p-4 bg-gray-800 rounded">
          <h3 className="text-lg font-semibold text-white mb-2">ðŸ“Š DCA Simulation Results</h3>
          <div className="space-y-2 text-sm text-gray-300">
            {dcaResults.map((step, i) => (
              <div key={i} className="border-b border-gray-700 pb-1">
                <strong>Step {i + 1}</strong> â€” {step.decision} at{" "}
                <span className="text-green-300">{new Date(step.timestamp).toLocaleString()}</span>{" "}
                | Price: ${step.price?.toFixed(2)} | Volume: {step.volume}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default DcaStrategyBuilder;
