import { createChart } from "lightweight-charts";
import { useEffect, useRef, useState } from "react";

const CandleChart = ({ data, width: propWidth, height: propHeight, onCandleClick, dcaMarkers = [] }) => {
  const containerRef = useRef(null);
  const chartRef = useRef(null);
  const seriesRef = useRef(null);
  const [dimensions, setDimensions] = useState({ width: 600, height: 400 });
  const [selectedIndex, setSelectedIndex] = useState(null);

  useEffect(() => {
    if (propWidth && propHeight) {
      setDimensions({ width: propWidth, height: propHeight });
    } else if (containerRef.current) {
      setDimensions({
        width: containerRef.current.offsetWidth || 600,
        height: containerRef.current.offsetHeight || 400,
      });
    }
  }, [propWidth, propHeight]);

  useEffect(() => {
    if (!containerRef.current || !data?.length) return;

    if (chartRef.current) {
      chartRef.current.remove();
    }

    const chart = createChart(containerRef.current, {
      width: dimensions.width,
      height: dimensions.height,
      layout: {
        background: { color: "#ffffff" },
        textColor: "#000000",
      },
      grid: {
        vertLines: { color: "#eee" },
        horzLines: { color: "#eee" },
      },
      crosshair: {
        mode: 0,
      },
      rightPriceScale: {
        borderColor: "#ccc",
      },
      timeScale: {
        borderColor: "#ccc",
        timeVisible: true,
        secondsVisible: false,
      },
    });

    const candlestickSeries = chart.addCandlestickSeries();
    chartRef.current = chart;
    seriesRef.current = candlestickSeries;

    const formatted = data.map((d) => ({
      time: Math.floor((d.timestamp ?? d.time * 1000) / 1000),
      open: d.open,
      high: d.high,
      low: d.low,
      close: d.close,
    }));

    candlestickSeries.setData(formatted);

    if (Array.isArray(dcaMarkers)) {
      const formattedMarkers = dcaMarkers
        .filter((m) => m.time) // guard against invalid
        .map((m, i) => ({
          time: Math.floor(m.time / 1000),
          position: "belowBar",
          color: "green",
          shape: "circle",
          text: m.label || `DCA ${i + 1}`,
        }));
      candlestickSeries.setMarkers(formattedMarkers);
    }

    chartRef.current.subscribeClick((param) => {
      if (!param || !param.time || !data) return;

      const clickedTimestampSec = param.time;
      const index = data.findIndex(
        (d) =>
          Math.floor(d.timestamp / 1000) === clickedTimestampSec ||
          d.time === clickedTimestampSec
      );
      if (index !== -1) {
        console.log("Candle clicked. Setting index:", index, "Timestamp:", data[index].timestamp ?? data[index].time * 1000);
        setSelectedIndex(index);

        const clicked = data[index];
        const ts = clicked.timestamp !== undefined ? clicked.timestamp : clicked.time * 1000;
        onCandleClick?.(ts); // already in seconds, don't divide again
      } else {
        console.warn("Candle click timestamp not found in data:", clickedTimestampSec);
      }
    });

    return () => chartRef.current?.remove();
  }, [data, dimensions, onCandleClick, dcaMarkers]);

  useEffect(() => {
    if (selectedIndex !== null && data[selectedIndex] && seriesRef.current) {
      const point = data[selectedIndex];
      const time = Math.floor((point.timestamp ?? point.time * 1000) / 1000);
      seriesRef.current.setMarkers([
        {
          time,
          position: "aboveBar",
          color: "red",
          shape: "arrowDown",
          text: "Selected",
        },
      ]);

      onCandleClick?.(point.timestamp ? Math.floor(point.timestamp / 1000) : point.time);
    }
  }, [selectedIndex, data, onCandleClick]);

  return (
    <div>
      <div ref={containerRef} style={{ width: "100%", height: "400px" }} />
      {/*
      <input
        type="range"
        min={0}
        max={data.length - 1}
        value={selectedIndex ?? 0}
        onChange={(e) => {
          const idx = parseInt(e.target.value, 10);
          setSelectedIndex(idx);
          const pt = data[idx];
          if (pt) {
            const ts = pt.timestamp !== undefined ? pt.timestamp : pt.time * 1000;
            onCandleClick?.(ts);
          }
        }}
        style={{ width: "100%", marginTop: "1rem" }}
      />
      */}
    </div>
  );
};

export default CandleChart;
