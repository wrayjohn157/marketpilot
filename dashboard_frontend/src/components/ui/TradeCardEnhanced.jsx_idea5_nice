import { RefreshCw, ShieldCheck, TrendingUp, Activity, Percent, Zap } from "lucide-react";
import { useState } from "react";
import { Button } from "./Button";
import { Card } from "./Card";
import { PriceProgressBar } from "./PriceProgressBar";
import { Sparkline } from "./Sparkline";

export default function TradeCard({ trade }) {
  const [liveTrade, setLiveTrade] = useState(trade);
  const [loading, setLoading] = useState(false);

  const {
    deal_id,
    symbol,
    avg_entry_price,
    current_price,
    tp1_shift,
    entry_score,
    current_score,
    confidence_score,
    recovery_odds,
    safu_score,
    step,
    open_pnl,
    pnl_pct,
    sparkline_data = [],
    rejection_reason,
    be_price,
  } = liveTrade;

  const entry = parseFloat(avg_entry_price) || 1;
  const current = parseFloat(current_price) || entry;
  const breakEven = parseFloat(be_price) || entry;
  const tp1 = breakEven * (1 + (parseFloat(tp1_shift) || 0) / 100);

  const refreshPrice = async () => {
    setLoading(true);
    try {
      const res = await fetch(`/refresh-price/${deal_id}`);
      const data = await res.json();

      if (data?.current_price) {
        setLiveTrade(prev => ({
          ...prev,
          current_price: data.current_price,
          open_pnl: data.open_pnl ?? prev.open_pnl,
          pnl_pct: data.pnl_pct ?? prev.pnl_pct,
        }));
      } else {
        console.error("⚠️ Invalid refresh payload:", data);
      }
    } catch (e) {
      console.error("❌ Refresh error:", e);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="relative overflow-hidden">
      {/* Sparkline ghost background */}
      {sparkline_data.length > 1 && (
        <div className="absolute inset-0 opacity-5 blur-[3px] pointer-events-none">
          <Sparkline data={sparkline_data} />
        </div>
      )}

      {/* Main Card content */}
      <Card className="border bg-background/90 backdrop-blur-sm rounded-md space-y-2 shadow-sm relative z-10 flex flex-col md:flex-row overflow-hidden bg-transparent p-2">
        {/* ── RIGHT: Content ───────────────────────────── */}
        <div className="flex-1 flex flex-col justify-between space-y-2">
          {/* Header */}
          <div className="flex justify-start items-center gap-2 mb-1">
            <h2 className="text-base font-medium">{symbol}</h2>
            <Button size="xs" variant="ghost" onClick={refreshPrice} disabled={loading} title="Refresh">
              <RefreshCw className={`w-4 h-4 ${loading ? "animate-spin" : ""}`} />
            </Button>
          </div>

          {/* Entry/TP1 & Reason */}
          <div className="text-sm text-muted-foreground">
            Entry: {entry.toFixed(4)} › TP1: {tp1.toFixed(4)}
          </div>
          {rejection_reason && (
            <div className="italic text-yellow-400 text-sm">
              Reason: {rejection_reason.toUpperCase()}
            </div>
          )}

          <div className="flex flex-col md:flex-row md:items-center justify-between gap-y-2 md:gap-y-0">
            <div className="flex-1 flex flex-wrap gap-x-4 gap-y-1 text-sm text-muted-foreground">
              <div>
                <div className="text-[11px]">Score</div>
                <div className="font-semibold text-white">{entry_score?.toFixed(2)} → {current_score?.toFixed(2)}</div>
              </div>
              <div>
                <div className="text-[11px]">SAFU</div>
                <div className="font-semibold text-white">{safu_score?.toFixed(2)}</div>
              </div>
              <div>
                <div className="text-[11px]">Confidence</div>
                <div className="font-semibold text-white">{confidence_score?.toFixed(2)}</div>
              </div>
              <div>
                <div className="text-[11px]">Odds</div>
                <div className="font-semibold text-white">{recovery_odds?.toFixed(2)}</div>
              </div>
              <div>
                <div className="text-[11px]">Step</div>
                <div className="font-semibold text-white">{step ?? 0}</div>
              </div>
              <div>
                <div className="text-[11px]">PnL</div>
                <div className={open_pnl >= 0 ? "text-green-400 font-semibold" : "text-red-400 font-semibold"}>
                  {(open_pnl ?? 0).toFixed(2)} USDT <span className="text-muted">({pnl_pct?.toFixed(2)}%)</span>
                </div>
              </div>
            </div>
            <div className="w-full md:w-1/2">
              <PriceProgressBar
                current={current}
                breakEven={breakEven}
                tp1={tp1}
              />
            </div>
          </div>

          {/* ── BOTTOM: Sparkline ───────────────────────────── */}
          {/* Removed the inline Sparkline here since it's rendered as background */}
        </div>
      </Card>
    </div>
  );
}
