import React, { useEffect, useState } from "react";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  ReferenceDot,
  ReferenceLine,
  ReferenceArea,
  BarChart,
  Bar,
  Cell,
} from "recharts";
import { Card, CardContent } from "../ui/Card.jsx";

// Takes real price array + entry index + config
const computeDcaSteps = (priceSeries, entryIndex, config) => {
  const {
    base_order_usdt = 200,
    drawdown_trigger_pct = 0.9,
    dca_multipliers = [1, 2, 4],
  } = config;

  const entryCandle = priceSeries[entryIndex];
  if (!entryCandle) return [];

  const entryPrice = entryCandle.price;

  return dca_multipliers.map((mult, i) => {
    const levelPct = drawdown_trigger_pct * (i + 1);
    const stepPrice = parseFloat((entryPrice * (1 - levelPct)).toFixed(4));
    return {
      label: `SO${i + 1}`,
      volume: base_order_usdt * mult,
      price: stepPrice,
      index: entryIndex + (i + 1) * 3,
    };
  });
};

export default function DcaDecisionDebugger({ priceSeries, entryIndex = 30, config = {}, btcStatus = "SAFE" }) {
  const [dcaSteps, setDcaSteps] = useState([]);

  useEffect(() => {
    if (priceSeries?.length && entryIndex >= 0) {
      setDcaSteps(computeDcaSteps(priceSeries, entryIndex, config));
    }
  }, [priceSeries, entryIndex, config]);

  const entryCandle = priceSeries?.[entryIndex];
  if (!entryCandle) {
    return (
      <Card className="mt-4">
        <CardContent>
          <h2 className="text-xl font-semibold mb-2">üß™ DCA Decision Debugger</h2>
          <p className="text-sm text-red-500">‚ö†Ô∏è Not enough price data for entryIndex = {entryIndex}</p>
        </CardContent>
      </Card>
    );
  }

  const entryPrice = entryCandle.price;
  const entryTime = entryCandle.time;
  const tp1Pct = config.tp1_pct_target || 0.025;
  const tp1Low = entryPrice * (1 + tp1Pct * 0.95);
  const tp1High = entryPrice * (1 + tp1Pct * 1.05);

  const dcaLadder = [
    { step: "Base", amount: config.base_order_usdt || 200 },
    ...dcaSteps.map((step) => ({ step: step.label, amount: step.volume })),
  ];

  return (
    <Card className="mt-4">
      <CardContent>
        <h2 className="text-xl font-semibold mb-2">üß™ DCA Decision Debugger</h2>

        <ResponsiveContainer width="100%" height={300}>
          <LineChart data={priceSeries}>
            <XAxis dataKey="time" hide />
            <YAxis domain={['auto', 'auto']} />
            <Tooltip />

            <Line type="monotone" dataKey="price" stroke="#10b981" strokeWidth={2} dot={false} />

            {/* Entry */}
            <ReferenceDot x={entryTime} y={entryPrice} r={5} fill="green" label="Entry" />

            {/* DCA Steps */}
            {dcaSteps.map((step, idx) => (
              <ReferenceDot
                key={idx}
                x={priceSeries[step.index]?.time || priceSeries.at(-1)?.time}
                y={step.price}
                r={4}
                fill="#ef4444"
                label={`${step.label} $${step.volume}`}
              />
            ))}

            {/* TP1 zone */}
            <ReferenceArea
              y1={tp1Low}
              y2={tp1High}
              strokeOpacity={0.1}
              fill="#c084fc"
              label="TP1 Recovery Zone"
            />
          </LineChart>
        </ResponsiveContainer>

        <div className="mt-6">
          <ResponsiveContainer width="100%" height={120}>
            <BarChart data={dcaLadder}>
              <XAxis dataKey="step" />
              <YAxis />
              <Tooltip />
              <Bar dataKey="amount">
                {dcaLadder.map((entry, index) => (
                  <Cell key={index} fill={index === 0 ? "#10b981" : "#ef4444"} />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
          <p className="text-xs text-muted mt-1 text-center">Capital Allocation</p>
        </div>

        <p className="text-sm text-muted mt-2">
          Entry: ${entryPrice?.toFixed(4)} | BTC: {btcStatus}
        </p>
      </CardContent>
    </Card>
  );
}
