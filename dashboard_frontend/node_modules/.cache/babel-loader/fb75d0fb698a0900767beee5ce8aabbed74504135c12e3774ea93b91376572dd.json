{"ast":null,"code":"import { fillWildcards } from './utils/fill-wildcards.mjs';\nimport { removeNonTranslationalTransform } from './utils/unit-conversion.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\nconst toResolve = new Set();\nlet isScheduled = false;\nlet anyNeedsMeasurement = false;\nlet isForced = false;\nfunction measureAllKeyframes() {\n  if (anyNeedsMeasurement) {\n    const resolversToMeasure = Array.from(toResolve).filter(resolver => resolver.needsMeasurement);\n    const elementsToMeasure = new Set(resolversToMeasure.map(resolver => resolver.element));\n    const transformsToRestore = new Map();\n    /**\n     * Write pass\n     * If we're measuring elements we want to remove bounding box-changing transforms.\n     */\n    elementsToMeasure.forEach(element => {\n      const removedTransforms = removeNonTranslationalTransform(element);\n      if (!removedTransforms.length) return;\n      transformsToRestore.set(element, removedTransforms);\n      element.render();\n    });\n    // Read\n    resolversToMeasure.forEach(resolver => resolver.measureInitialState());\n    // Write\n    elementsToMeasure.forEach(element => {\n      element.render();\n      const restore = transformsToRestore.get(element);\n      if (restore) {\n        restore.forEach(_ref => {\n          let [key, value] = _ref;\n          element.getValue(key)?.set(value);\n        });\n      }\n    });\n    // Read\n    resolversToMeasure.forEach(resolver => resolver.measureEndState());\n    // Write\n    resolversToMeasure.forEach(resolver => {\n      if (resolver.suspendedScrollY !== undefined) {\n        window.scrollTo(0, resolver.suspendedScrollY);\n      }\n    });\n  }\n  anyNeedsMeasurement = false;\n  isScheduled = false;\n  toResolve.forEach(resolver => resolver.complete(isForced));\n  toResolve.clear();\n}\nfunction readAllKeyframes() {\n  toResolve.forEach(resolver => {\n    resolver.readKeyframes();\n    if (resolver.needsMeasurement) {\n      anyNeedsMeasurement = true;\n    }\n  });\n}\nfunction flushKeyframeResolvers() {\n  isForced = true;\n  readAllKeyframes();\n  measureAllKeyframes();\n  isForced = false;\n}\nclass KeyframeResolver {\n  constructor(unresolvedKeyframes, onComplete, name, motionValue, element) {\n    let isAsync = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    /**\n     * Track whether this resolver has completed. Once complete, it never\n     * needs to attempt keyframe resolution again.\n     */\n    this.isComplete = false;\n    /**\n     * Track whether this resolver is async. If it is, it'll be added to the\n     * resolver queue and flushed in the next frame. Resolvers that aren't going\n     * to trigger read/write thrashing don't need to be async.\n     */\n    this.isAsync = false;\n    /**\n     * Track whether this resolver needs to perform a measurement\n     * to resolve its keyframes.\n     */\n    this.needsMeasurement = false;\n    /**\n     * Track whether this resolver is currently scheduled to resolve\n     * to allow it to be cancelled and resumed externally.\n     */\n    this.isScheduled = false;\n    this.unresolvedKeyframes = [...unresolvedKeyframes];\n    this.onComplete = onComplete;\n    this.name = name;\n    this.motionValue = motionValue;\n    this.element = element;\n    this.isAsync = isAsync;\n  }\n  scheduleResolve() {\n    this.isScheduled = true;\n    if (this.isAsync) {\n      toResolve.add(this);\n      if (!isScheduled) {\n        isScheduled = true;\n        frame.read(readAllKeyframes);\n        frame.resolveKeyframes(measureAllKeyframes);\n      }\n    } else {\n      this.readKeyframes();\n      this.complete();\n    }\n  }\n  readKeyframes() {\n    const {\n      unresolvedKeyframes,\n      name,\n      element,\n      motionValue\n    } = this;\n    // If initial keyframe is null we need to read it from the DOM\n    if (unresolvedKeyframes[0] === null) {\n      const currentValue = motionValue?.get();\n      // TODO: This doesn't work if the final keyframe is a wildcard\n      const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\n      if (currentValue !== undefined) {\n        unresolvedKeyframes[0] = currentValue;\n      } else if (element && name) {\n        const valueAsRead = element.readValue(name, finalKeyframe);\n        if (valueAsRead !== undefined && valueAsRead !== null) {\n          unresolvedKeyframes[0] = valueAsRead;\n        }\n      }\n      if (unresolvedKeyframes[0] === undefined) {\n        unresolvedKeyframes[0] = finalKeyframe;\n      }\n      if (motionValue && currentValue === undefined) {\n        motionValue.set(unresolvedKeyframes[0]);\n      }\n    }\n    fillWildcards(unresolvedKeyframes);\n  }\n  setFinalKeyframe() {}\n  measureInitialState() {}\n  renderEndStyles() {}\n  measureEndState() {}\n  complete() {\n    let isForced = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.isComplete = true;\n    this.onComplete(this.unresolvedKeyframes, this.finalKeyframe, isForced);\n    toResolve.delete(this);\n  }\n  cancel() {\n    if (!this.isComplete) {\n      this.isScheduled = false;\n      toResolve.delete(this);\n    }\n  }\n  resume() {\n    if (!this.isComplete) this.scheduleResolve();\n  }\n}\nexport { KeyframeResolver, flushKeyframeResolvers };","map":{"version":3,"names":["fillWildcards","removeNonTranslationalTransform","frame","toResolve","Set","isScheduled","anyNeedsMeasurement","isForced","measureAllKeyframes","resolversToMeasure","Array","from","filter","resolver","needsMeasurement","elementsToMeasure","map","element","transformsToRestore","Map","forEach","removedTransforms","length","set","render","measureInitialState","restore","get","_ref","key","value","getValue","measureEndState","suspendedScrollY","undefined","window","scrollTo","complete","clear","readAllKeyframes","readKeyframes","flushKeyframeResolvers","KeyframeResolver","constructor","unresolvedKeyframes","onComplete","name","motionValue","isAsync","arguments","isComplete","scheduleResolve","add","read","resolveKeyframes","currentValue","finalKeyframe","valueAsRead","readValue","setFinalKeyframe","renderEndStyles","delete","cancel","resume"],"sources":["/home/signal/market7/dashboard_frontend/node_modules/motion-dom/dist/es/animation/keyframes/KeyframesResolver.mjs"],"sourcesContent":["import { fillWildcards } from './utils/fill-wildcards.mjs';\nimport { removeNonTranslationalTransform } from './utils/unit-conversion.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst toResolve = new Set();\nlet isScheduled = false;\nlet anyNeedsMeasurement = false;\nlet isForced = false;\nfunction measureAllKeyframes() {\n    if (anyNeedsMeasurement) {\n        const resolversToMeasure = Array.from(toResolve).filter((resolver) => resolver.needsMeasurement);\n        const elementsToMeasure = new Set(resolversToMeasure.map((resolver) => resolver.element));\n        const transformsToRestore = new Map();\n        /**\n         * Write pass\n         * If we're measuring elements we want to remove bounding box-changing transforms.\n         */\n        elementsToMeasure.forEach((element) => {\n            const removedTransforms = removeNonTranslationalTransform(element);\n            if (!removedTransforms.length)\n                return;\n            transformsToRestore.set(element, removedTransforms);\n            element.render();\n        });\n        // Read\n        resolversToMeasure.forEach((resolver) => resolver.measureInitialState());\n        // Write\n        elementsToMeasure.forEach((element) => {\n            element.render();\n            const restore = transformsToRestore.get(element);\n            if (restore) {\n                restore.forEach(([key, value]) => {\n                    element.getValue(key)?.set(value);\n                });\n            }\n        });\n        // Read\n        resolversToMeasure.forEach((resolver) => resolver.measureEndState());\n        // Write\n        resolversToMeasure.forEach((resolver) => {\n            if (resolver.suspendedScrollY !== undefined) {\n                window.scrollTo(0, resolver.suspendedScrollY);\n            }\n        });\n    }\n    anyNeedsMeasurement = false;\n    isScheduled = false;\n    toResolve.forEach((resolver) => resolver.complete(isForced));\n    toResolve.clear();\n}\nfunction readAllKeyframes() {\n    toResolve.forEach((resolver) => {\n        resolver.readKeyframes();\n        if (resolver.needsMeasurement) {\n            anyNeedsMeasurement = true;\n        }\n    });\n}\nfunction flushKeyframeResolvers() {\n    isForced = true;\n    readAllKeyframes();\n    measureAllKeyframes();\n    isForced = false;\n}\nclass KeyframeResolver {\n    constructor(unresolvedKeyframes, onComplete, name, motionValue, element, isAsync = false) {\n        /**\n         * Track whether this resolver has completed. Once complete, it never\n         * needs to attempt keyframe resolution again.\n         */\n        this.isComplete = false;\n        /**\n         * Track whether this resolver is async. If it is, it'll be added to the\n         * resolver queue and flushed in the next frame. Resolvers that aren't going\n         * to trigger read/write thrashing don't need to be async.\n         */\n        this.isAsync = false;\n        /**\n         * Track whether this resolver needs to perform a measurement\n         * to resolve its keyframes.\n         */\n        this.needsMeasurement = false;\n        /**\n         * Track whether this resolver is currently scheduled to resolve\n         * to allow it to be cancelled and resumed externally.\n         */\n        this.isScheduled = false;\n        this.unresolvedKeyframes = [...unresolvedKeyframes];\n        this.onComplete = onComplete;\n        this.name = name;\n        this.motionValue = motionValue;\n        this.element = element;\n        this.isAsync = isAsync;\n    }\n    scheduleResolve() {\n        this.isScheduled = true;\n        if (this.isAsync) {\n            toResolve.add(this);\n            if (!isScheduled) {\n                isScheduled = true;\n                frame.read(readAllKeyframes);\n                frame.resolveKeyframes(measureAllKeyframes);\n            }\n        }\n        else {\n            this.readKeyframes();\n            this.complete();\n        }\n    }\n    readKeyframes() {\n        const { unresolvedKeyframes, name, element, motionValue } = this;\n        // If initial keyframe is null we need to read it from the DOM\n        if (unresolvedKeyframes[0] === null) {\n            const currentValue = motionValue?.get();\n            // TODO: This doesn't work if the final keyframe is a wildcard\n            const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\n            if (currentValue !== undefined) {\n                unresolvedKeyframes[0] = currentValue;\n            }\n            else if (element && name) {\n                const valueAsRead = element.readValue(name, finalKeyframe);\n                if (valueAsRead !== undefined && valueAsRead !== null) {\n                    unresolvedKeyframes[0] = valueAsRead;\n                }\n            }\n            if (unresolvedKeyframes[0] === undefined) {\n                unresolvedKeyframes[0] = finalKeyframe;\n            }\n            if (motionValue && currentValue === undefined) {\n                motionValue.set(unresolvedKeyframes[0]);\n            }\n        }\n        fillWildcards(unresolvedKeyframes);\n    }\n    setFinalKeyframe() { }\n    measureInitialState() { }\n    renderEndStyles() { }\n    measureEndState() { }\n    complete(isForced = false) {\n        this.isComplete = true;\n        this.onComplete(this.unresolvedKeyframes, this.finalKeyframe, isForced);\n        toResolve.delete(this);\n    }\n    cancel() {\n        if (!this.isComplete) {\n            this.isScheduled = false;\n            toResolve.delete(this);\n        }\n    }\n    resume() {\n        if (!this.isComplete)\n            this.scheduleResolve();\n    }\n}\n\nexport { KeyframeResolver, flushKeyframeResolvers };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}