# gpt_code_editor_api.py
from fastapi import APIRouter, Request, HTTPException
from openai import OpenAI
from pathlib import Path
import json
import traceback

router = APIRouter(prefix="/gpt")

# === Load API key ===
CRED_PATH = Path("/home/signal/market7/config/paper_cred.json")
try:
    with open(CRED_PATH) as f:
        creds = json.load(f)
        api_key = creds.get("OPENAI_API_KEY")
        client = OpenAI(api_key=api_key)
        print("[‚úÖ] OpenAI key loaded.")
except Exception as e:
    client = None
    print(f"[ERROR] Failed to load OPENAI_API_KEY: {e}")

@router.post("/code-edit")
async def edit_code(request: Request):
    data = await request.json()
    file_path = data.get("file_path")
    instruction = data.get("instruction")
    sample_data = data.get("sample_data", None)
    write_back = data.get("write_back", False)

    if not file_path or not instruction:
        raise HTTPException(status_code=400, detail="Missing file_path or instruction")
    if client is None:
        raise HTTPException(status_code=500, detail="OpenAI API key not loaded")

    file = Path(file_path)
    if not file.exists():
        raise HTTPException(status_code=404, detail="File not found")

    try:
        original_code = file.read_text()
        prompt_parts = [
            "You are an expert Python engineer working on a crypto trading pipeline.",
            f"File: {file_path}",
            f"Instruction: {instruction}",
            "Here is the code:",
            original_code
        ]
        if sample_data:
            prompt_parts.append(f"Here is a sample dataset or field structure: {sample_data}")

        prompt = "\n\n".join(prompt_parts)

        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "You are a coding assistant for Project Signal."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            max_tokens=1600
        )

        reply = response.choices[0].message.content.strip()

        if write_back:
            file.write_text(reply)
            print(f"[üíæ] File overwritten: {file_path}")

        return {"result": "success", "modified_code": reply, "written": write_back}

    except Exception as e:
        print("[‚ùå GPT Code Edit Error]", traceback.format_exc())
        raise HTTPException(status_code=500, detail=f"OpenAI Error: {str(e)}")
