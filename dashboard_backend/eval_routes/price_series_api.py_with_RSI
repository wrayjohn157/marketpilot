from fastapi import APIRouter, Query
from pathlib import Path
import json
from datetime import datetime

router = APIRouter()

BASE_DIR = Path("/home/signal/market7/data/snapshots")


@router.get("/price-series")
def get_price_series(
    symbol: str = Query(..., description="e.g. ARB"),
    interval: str = Query("15m", description="e.g. 15m, 1h, 4h"),
    date: str = None,
):
    try:
        symbol = symbol.upper()
        filename = f"{symbol}_{interval}_klines.json"

        if date:
            file_path = BASE_DIR / date / filename
        else:
            dated_folders = sorted(BASE_DIR.glob("20*"), reverse=True)
            file_path = dated_folders[0] / filename if dated_folders else None

        if not file_path or not file_path.exists():
            return {"error": f"Price data not found for {symbol} {interval}"}

        # Load enough history to compute RSI14 over 210 bars (plus lookback)
        period = 14
        bars_needed = 210 + period
        raw = []
        # Load dated folders starting from latest until we have enough bars
        dated_folders = sorted(BASE_DIR.glob("20*"), reverse=True)
        for folder in dated_folders:
            candidate = folder / filename
            if candidate.exists():
                with open(candidate) as f:
                    raw.extend(json.load(f))
            if len(raw) >= bars_needed:
                break
        if not raw:
            return {"error": f"Price data not found for {symbol} {interval}"}
        # Trim to the most recent bars_needed entries to compute RSI consistently
        raw = raw[-bars_needed:]

        # Build simplified price series
        base_series = [
            {
                "timestamp": x[0],  # open time
                "open": float(x[1]),
                "high": float(x[2]),
                "low": float(x[3]),
                "close": float(x[4]),
            }
            for x in raw
        ]

        # Compute RSI14 server-side over the same bar window
        closes = [bar["close"] for bar in base_series]
        rsi_values = []
        for i in range(len(closes)):
            if i < period:
                rsi_values.append(None)
            else:
                gains = []
                losses = []
                for j in range(i - period + 1, i + 1):
                    change = closes[j] - closes[j-1]
                    gains.append(max(change, 0))
                    losses.append(abs(min(change, 0)))
                avg_gain = sum(gains) / period
                avg_loss = sum(losses) / period
                if avg_loss == 0:
                    rsi = 100.0
                else:
                    rs = avg_gain / avg_loss
                    rsi = 100.0 - (100.0 / (1.0 + rs))
                rsi_values.append(rsi)
        # Attach RSI14 values back to each bar
        for idx, bar in enumerate(base_series):
            bar["RSI14"] = rsi_values[idx]
        # Remove the first 'period' bars (they were only for RSI lookback)
        output_series = base_series[period:]

        return {
            "symbol": symbol,
            "interval": interval,
            "date": file_path.parent.name,
            "series": output_series,
        }

    except Exception as e:
        return {"error": str(e)}
