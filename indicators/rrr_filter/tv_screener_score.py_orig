# tv_screener_score.py

import math

def tv_screener_score(indicators: dict, config: dict = None) -> float:
    """
    Calculate a TradingView-style screener score using momentum and trend signals.
    """
    # === Config defaults ===
    default_config = {
        "weights": {
            "rsi": 0.2,
            "macd_histogram": 0.2,
            "macd_lift": 0.2,
            "rsi_slope": 0.2,
            "adx": 0.2,
        },
        "thresholds": {
            "rsi_min": 50,
            "macd_histogram_min": 0,
            "macd_lift_min": 0,
            "rsi_slope_min": 0,
            "adx_min": 20,
        },
    }

    if config is None:
        config = default_config
    else:
        # Deep merge config with defaults
        for key in default_config:
            if key not in config:
                config[key] = default_config[key]
            else:
                for subkey in default_config[key]:
                    config[key].setdefault(subkey, default_config[key][subkey])

    weights = config["weights"]
    thresholds = config["thresholds"]
    score = 0
    total_weight = 0

    # === RSI Check ===
    rsi = indicators.get("rsi")
    if rsi is not None:
        if rsi >= thresholds["rsi_min"]:
            score += weights["rsi"]
        total_weight += weights["rsi"]

    # === MACD Histogram ===
    macd_hist = indicators.get("macd_histogram")
    if macd_hist is not None:
        if macd_hist > thresholds["macd_histogram_min"]:
            score += weights["macd_histogram"]
        total_weight += weights["macd_histogram"]

    # === MACD Lift ===
    macd_lift = indicators.get("macd_lift")
    if macd_lift is not None:
        if macd_lift > thresholds["macd_lift_min"]:
            score += weights["macd_lift"]
        total_weight += weights["macd_lift"]

    # === RSI Slope ===
    rsi_slope = indicators.get("rsi_slope")
    if rsi_slope is not None:
        if rsi_slope > thresholds["rsi_slope_min"]:
            score += weights["rsi_slope"]
        total_weight += weights["rsi_slope"]

    # === ADX ===
    adx = indicators.get("adx")
    if adx is not None:
        if adx > thresholds["adx_min"]:
            score += weights["adx"]
        total_weight += weights["adx"]

    return round(score / total_weight, 4) if total_weight > 0 else 0.0
