# recovery_confidence_utils.py

import xgboost as xgb
import os
import json
from pathlib import Path
import pandas as pd
import numpy as np

MODEL_PATH = Path("/home/signal/market6/live/models/xgb_confidence_model.pkl")

CONFIDENCE_FEATURES = [
    "step", "entry_score", "current_score", "drawdown_pct", "safu_score",
    "macd_lift", "rsi", "rsi_slope", "adx", "confidence_score", "tp1_shift",
    "safu_good_but_zombie",
    "snapshot_score_trend", "snapshot_rsi_trend", "snapshot_max_drawdown",
    "snapshot_min_score", "snapshot_min_rsi", "snapshot_time_to_max_drawdown_min"
]

def clean_snapshot_for_confidence(snapshot):
    """Ensure only valid numeric features are kept."""
    cleaned = {}
    for k in CONFIDENCE_FEATURES:
        val = snapshot.get(k)
        if isinstance(val, (int, float, np.integer, np.float32, np.float64)):
            cleaned[k] = float(val)
        else:
            cleaned[k] = 0.0
    return cleaned

def predict_confidence_score(snapshot):
    """Returns a float between 0 and 1."""
    if not MODEL_PATH.exists():
        return 0.5

    model = xgb.XGBRegressor()
    model.load_model(str(MODEL_PATH))

    clean = clean_snapshot_for_confidence(snapshot)
    df = pd.DataFrame([clean])
    proba = model.predict(df)[0]
    return float(np.clip(proba, 0, 1))
