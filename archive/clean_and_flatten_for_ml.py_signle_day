#!/usr/bin/env python3
import json
from pathlib import Path
from datetime import datetime

INPUT_PATH = Path("/home/signal/market7/ml/merged/merged_trades_2025-05-18.jsonl")
OUTPUT_PATH = Path("/home/signal/market7/ml/merged/cleaned_flattened_2025-05-18.jsonl")

REQUIRED_TRADE_FIELDS = ["entry_time", "exit_time", "entry_price", "exit_price"]

def is_valid_entry(entry):
    trade = entry.get("trade")
    fork = entry.get("fork")

    if not trade or not fork:
        return False
    if not isinstance(fork.get("raw_indicators"), dict):
        return False
    for field in REQUIRED_TRADE_FIELDS:
        if field not in trade:
            return False
    return True

def flatten_entry(entry):
    flat = {}

    trade = entry["trade"]
    fork = entry["fork"]
    indicators = fork["raw_indicators"]
    btc = entry.get("btc_context", {}).get("entry", {})
    tv = entry.get("tv_kicker", {})

    # Flatten key trade info
    flat["symbol"] = trade.get("symbol")
    flat["entry_time"] = trade.get("entry_time")
    flat["exit_time"] = trade.get("exit_time")
    flat["entry_price"] = trade.get("entry_price")
    flat["exit_price"] = trade.get("exit_price")
    flat["pnl_pct"] = trade.get("pnl_pct")
    flat["safety_orders"] = trade.get("safety_orders")
    flat["status"] = trade.get("status")

    # Fork score
    flat["fork_score"] = fork.get("score")
    for k, v in indicators.items():
        flat[f"ind_{k}"] = v

    # BTC context
    for k, v in btc.items():
        flat[f"btc_{k}"] = v

    # TV kicker
    if tv:
        flat["tv_tag"] = tv.get("tv_tag")
        flat["tv_kicker"] = tv.get("tv_kicker")
        flat["tv_pass"] = tv.get("pass", False)

    return flat

def main():
    if not INPUT_PATH.exists():
        print(f"❌ Input file not found: {INPUT_PATH}")
        return

    with open(INPUT_PATH, "r") as f:
        lines = [json.loads(line) for line in f if line.strip()]

    cleaned = [flatten_entry(e) for e in lines if is_valid_entry(e)]

    with open(OUTPUT_PATH, "w") as f:
        for row in cleaned:
            f.write(json.dumps(row) + "\n")

    print(f"✅ Saved {len(cleaned)} cleaned + flattened rows to: {OUTPUT_PATH}")

if __name__ == "__main__":
    main()
