name: CI/CD Pipeline

on:
  push:
    branches: [ main, refactor ]
  pull_request:
    branches: [ main, refactor ]

jobs:
  test-backend:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock

    - name: Run backend tests
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: dashboard_frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd dashboard_frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd dashboard_frontend
        npm test -- --coverage --watchAll=false

    - name: Build frontend
      run: |
        cd dashboard_frontend
        npm run build

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./dashboard_frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  lint-and-format:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: dashboard_frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy

    - name: Install frontend dependencies
      run: |
        cd dashboard_frontend
        npm ci

    - name: Run Python linting
      run: |
        black --check .
        isort --check-only .
        flake8 .
        mypy . --ignore-missing-imports

    - name: Run frontend linting
      run: |
        cd dashboard_frontend
        npm run lint

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run security scans
      run: |
        safety check
        bandit -r . -f json -o bandit-report.json

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json

  build-and-deploy:
    needs: [test-backend, test-frontend, lint-and-format, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deploy/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/market7-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/market7-backend:${{ github.sha }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./dashboard_frontend
        file: ./dashboard_frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/market7-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/market7-frontend:${{ github.sha }}

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add deployment commands here

    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test commands here
