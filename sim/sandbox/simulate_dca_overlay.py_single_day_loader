def run_dca_simulation(symbol: str, entry_time: int, tf: str = "1h", config_path: str = None):
    from sim.sandbox.utils.trade_utils import build_mock_trade
    from modules.sim_core_engine import simulate_dca_step, load_config
    from pathlib import Path

    trade = build_mock_trade(symbol=symbol, entry_time=entry_time, tf=tf)
    if not trade:
        raise ValueError("Failed to build trade input.")

    config = load_config(path=Path(config_path)) if config_path else load_config()
    return simulate_dca_step(trade, config)

#!/usr/bin/env python3

import argparse
import json
from pathlib import Path
from modules.sim_core_engine import simulate_dca_step, load_config
from sim.sandbox.utils.trade_utils import build_mock_trade


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--symbol", required=True, help="Symbol (e.g., BTCUSDT)")
    parser.add_argument(
        "--entry_time", type=int, required=True, help="Entry timestamp in ms"
    )
    parser.add_argument("--tf", default="1h", help="Timeframe (default: 1h)")
    parser.add_argument("--config", type=str, help="Optional path to DCA config YAML")
    args = parser.parse_args()

    # Build a mock trade
    trade = build_mock_trade(symbol=args.symbol, entry_time=args.entry_time, tf=args.tf)
    if not trade:
        print("[ERROR] Failed to build trade input.")
        return

    # Load DCA config
    config = load_config(path=Path(args.config)) if args.config else load_config()

    # Run simulation
    result = simulate_dca_step(trade, config)
    print(json.dumps(result, indent=2))


if __name__ == "__main__":
    main()
