from dca.utils.entry_utils import load_price_series  # or whatever exists

def load_klines_around_time(symbol, tf, center_time, lookback_candles=24):
    """
    Loads a window of klines centered around `center_time`.
    Used by simulate_dca_step in sandbox.
    """
    klines = load_price_series(symbol=symbol, tf=tf)
    # Assume klines are a list of dicts with 'timestamp'
    window = [
        k for k in klines
        if abs(k["timestamp"] - center_time) <= lookback_candles * tf_to_ms(tf) // 2
    ]
    return window

def tf_to_ms(tf: str):
    if tf.endswith("m"):
        return int(tf[:-1]) * 60_000
    if tf.endswith("h"):
        return int(tf[:-1]) * 60 * 60_000
    raise ValueError(f"Unrecognized TF: {tf}")
