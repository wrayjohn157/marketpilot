#!/usr/bin/env python3
import os
import json
import time
import logging
import requests
import pandas as pd
from pathlib import Path
from datetime import datetime
from ta.momentum import StochRSIIndicator, RSIIndicator
from ta.trend import EMAIndicator, ADXIndicator, MACD, PSARIndicator
from ta.volatility import AverageTrueRange

# === Config ===
BASE_DIR = Path("/home/signal/market7")
SYMBOLS_FILE = BASE_DIR / "data" / "binance_symbols.json"
SNAPSHOT_DIR = BASE_DIR / "data" / "snapshots"
TIMEFRAMES = ["1h", "4h", "15m"]
KLINE_LIMIT = 210
START_DATE = datetime(2025, 6, 1)
END_DATE = datetime(2025, 6, 27)

# === Logging ===
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s"
)

# === Load symbols ===
with open(SYMBOLS_FILE) as f:
    SYMBOLS = json.load(f)


# === Helpers ===
def fetch_klines(symbol, interval, end_ts, limit=KLINE_LIMIT):
    url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}&endTime={end_ts}"
    try:
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        df = pd.DataFrame(
            r.json(),
            columns=[
                "time",
                "open",
                "high",
                "low",
                "close",
                "volume",
                "close_time",
                "qav",
                "num_trades",
                "tb_base_vol",
                "tbqav",
                "ignore",
            ],
        )
        df = df.astype(
            {
                "open": float,
                "high": float,
                "low": float,
                "close": float,
                "volume": float,
            }
        )
        return df
    except Exception as e:
        logging.warning(f"❌ {symbol} {interval}: {e}")
        return None


def compute_indicators(df):
    try:
        indicators = {
            "EMA50": EMAIndicator(df["close"], 50).ema_indicator().iloc[-1],
            "EMA200": EMAIndicator(df["close"], 200).ema_indicator().iloc[-1],
            "RSI14": RSIIndicator(df["close"]).rsi().iloc[-1],
            "ADX14": ADXIndicator(df["high"], df["low"], df["close"]).adx().iloc[-1],
            "QQE": df["close"].ewm(alpha=1 / 14, adjust=False).mean().iloc[-1],
            "PSAR": PSARIndicator(df["high"], df["low"], df["close"]).psar().iloc[-1],
            "ATR": AverageTrueRange(df["high"], df["low"], df["close"])
            .average_true_range()
            .iloc[-1],
        }

        stoch_rsi = StochRSIIndicator(df["close"])
        indicators["StochRSI_K"] = stoch_rsi.stochrsi_k().iloc[-1]
        indicators["StochRSI_D"] = stoch_rsi.stochrsi_d().iloc[-1]

        macd = MACD(df["close"])
        indicators["MACD"] = macd.macd().iloc[-1]
        indicators["MACD_signal"] = macd.macd_signal().iloc[-1]
        indicators["MACD_diff"] = macd.macd_diff().iloc[-1]
        indicators["MACD_Histogram"] = macd.macd_diff().iloc[-1]
        indicators["MACD_Histogram_Prev"] = macd.macd_diff().iloc[-2]
        indicators["MACD_lift"] = macd.macd().iloc[-1] - macd.macd().iloc[-2]

        indicators["latest_close"] = df["close"].iloc[-1]
        indicators["timestamp"] = int(df["time"].iloc[-1] // 1000)

        return indicators
    except Exception as e:
        logging.warning(f"⚠️ Indicator calc failed: {e}")
        return None


def save_snapshot(symbol, tf, date_str, indicators):
    day_folder = SNAPSHOT_DIR / date_str
    day_folder.mkdir(parents=True, exist_ok=True)
    jsonl_file = day_folder / f"{symbol}_{tf}.jsonl"
    with open(jsonl_file, "a") as f:
        f.write(json.dumps(indicators) + "\n")


# === Main ===
def run_backfill():
    for tf in TIMEFRAMES:
        for symbol in SYMBOLS:
            full_symbol = symbol.upper() + "USDT"
            day = START_DATE
            while day <= END_DATE:
                end_ts = int(day.timestamp() * 1000)
                df = fetch_klines(full_symbol, tf, end_ts)
                if df is not None and len(df) >= 100:
                    indicators = compute_indicators(df)
                    if indicators:
                        save_snapshot(symbol, tf, day.strftime("%Y-%m-%d"), indicators)
                        logging.info(f"✅ {symbol} {tf} {day.date()}")
                else:
                    logging.info(
                        f"⏭️ Skipped {symbol} {tf} {day.date()} (insufficient data)"
                    )
                day += pd.Timedelta(days=1)


if __name__ == "__main__":
    run_backfill()
